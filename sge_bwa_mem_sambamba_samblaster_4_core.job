#!/bin/bash -l
#Force bash as the executing shell.
#$ -S /bin/bash
# Join the error stream to the output stream.
#$ -j yes
#$ -l h_rt=12:00:00
#$ -pe smp 4
#$ -l h_vmem=26G
#$ -l tmem=26G
#$ -l scr=170G
#$ -V
#$ -R y

date

BWADIR=/share/apps/genomics/bwa-0.7.12
NEWSAMDIR=/share/apps/genomics/samtools-1.2/bin
REFDIR=/share/apps/cto/reference/g1kh37
SAMBLASTER=/share/apps/cto/INSTALLS/samblaster-v.0.1.22
SAMBAMBA=/share/apps/cto/INSTALLS


# the qsub launcher has to supply, along with the working directory
# also the following parameters
reference=$1
query1=$2
query2=$3
workplace=$4
user=$5
referencefasta=$reference\.fasta

WORKDIR=$workplace

echo "the job is running on the node $HOSTNAME"
echo "job number $JOB_ID"

echo "working on sample $query1"

bamfile="$query1"\.bwa.bam

### these parameters are required in order to fill in the read groups lines
readgroup="$query1"_bwa
sample=$query1
library="gosgene"
platformunit="illumina"

# Set the current working directory to be within the sequencing
# directory
# the working directory has to be supplied within the qsub launcher as -v workplace="workingdirectory"
# using an absolute path
# the reads will be copied in the node hdd where all the output will be produced

cd /scratch0 || exit 
if [ ! -d "$user" ]
then
	echo "####MESS the directory $user on /scratch0/ does not exist: creating it"
	mkdir "$user" 
	cd "$user"  || exit
else
	echo "####MESS the directory $user on /scratch0 exists, moving to it"
	cd "$user" || exit
fi

echo "####MESS I am now on directory:"
pwd
echo

#######################################################
# check if reference is already available             #
#######################################################

if [ ! -f "$referencefasta".sa ]
then
        echo "####MESS untaring the reference files to the temporary directory"
        tar -xzf $REFDIR/"$reference"\.tar.gz -C /scratch0/"$user"/
else
        echo "####MESS the reference already exists in the node"
fi

echo "####MESS copy reference completed"
date

echo "creating the job directory"
mkdir "$JOB_ID"
cd "$JOB_ID" || exit

echo "####MESS I am now on directory:"
pwd
echo
echo "###MESS copying the fastq files"
cp "$WORKDIR"/"$query1" .
cp "$WORKDIR"/"$query2" .

ls -lh

echo "###MESS copy completed"
date

# Run the program
# WARNING - this job uses an already done reference

echo "############## running the bwa mem alignment of the two pairs"

"$BWADIR"/bwa mem -aM -R "@RG\tID:$readgroup\tSM:$sample\tPL:$platformunit\tLB:$library\tPU:$platformunit" /scratch0/"$user"/"$referencefasta" -t 2 "$query1" "$query2" | 
$SAMBLASTER/samblaster -M -d "$bamfile".disc.sam -s "$bamfile".split.sam | "$NEWSAMDIR"/samtools view -bS - -o "$bamfile"

date

ls -lh

########################################
#     using sortsam on 4 cores         # 
########################################

echo "Running sambamba sort $bamfile"

mkdir temp
### was getting frequent unable to write errors

"$SAMBAMBA"/sambamba_v0.5.8 sort -m 4G -t 4  "$bamfile"  --tmpdir=temp

if [ $? -eq 0 ]
then
  touch "$workplace"/bwa_mem_complete
fi

date 

ls -lh

########################################
#          stats with samtools         #
########################################

"$NEWSAMDIR"/samtools idxstats "${bamfile:0:7}"*sorted.bam  > "${bamfile:0:7}".stats

##################################
# copy to workplace folder       #
##################################

# create "job_done marker for pipeline

touch "$workplace"/bwa-complete

mv "${bamfile:0:7}"* "$workplace"
date

###################################
# removing the job folder         #
###################################
echo "####MESS moving to /scratch0/$user"
date
cd /scratch0/"$user" || exit
echo "####MESS removing any  file"
rm -r "$JOB_ID"
## remove reference files ######### 
rm  human*
echo "####MESS removal done"
date
echo "####END job finished"
