#!/bin/bash -l
#Force bash as the executing shell.
#$ -S /bin/bash
# Join the error stream to the output stream.
#$ -j yes
#$ -l h_rt=12:00:00
#$ -pe smp 4
#$ -l h_vmem=2G
#$ -l tmem=2G
#$ -l scr=70G
#$ -V
#$ -R y

date

REFDIR=/share/apps/cto/reference/g1kh37

# the qsub launcher has to supply, along with the working directory
# also the following parameters
reference=$1
query1=$2
query2=$3
sample=$4
identifier=$5
workplace=$6
user=$7
referencefasta=$reference\.fasta

WORKDIR=$workplace

echo "the job is running on the node $HOSTNAME"
echo "job number $JOB_ID"

echo "working on sample $query1"

bamfile="$query1"\.bwa.bam

### these parameters are required in order to fill in the read groups lines
library="gosgene"
platformunit="illumina"

# Set the current working directory to be within the sequencing
# directory
# the working directory has to be supplied within the qsub launcher as -v workplace="workingdirectory"
# using an absolute path
# the reads will be copied in the node hdd where all the output will be produced

cd /scratch0 || exit 
if [ ! -d "$user" ]
then
	echo "####MESS the directory $user on /scratch0/ does not exist: creating it"
	mkdir "$user" 
	cd "$user"  || exit
else
	echo "####MESS the directory $user on /scratch0 exists, moving to it"
	cd "$user" || exit
fi

echo "####MESS I am now on directory:"
pwd
echo

#######################################################
# check if reference is already available             #
#######################################################

if [ ! -f "$referencefasta".sa ]
then
        echo "####MESS untaring the reference files to the temporary directory"
        tar -xzf $REFDIR/"$reference"\.tar.gz -C /scratch0/"$user"/
else
        echo "####MESS the reference already exists in the node"
fi

echo "####MESS copy reference completed"
date

echo "creating the job directory"
mkdir "$JOB_ID"
cd "$JOB_ID" || exit

echo "####MESS I am now on directory:"
pwd
echo
echo "###MESS copying the fastq files"
cp "$WORKDIR"/"$query1" .
cp "$WORKDIR"/"$query2" .

ls -lh

echo "###MESS copy completed"
date

######################
#### load modules ####
######################

module load bwa
module load sambamba
module load samblaster
module load samtools

# Run the program
# WARNING - this job uses an already done reference

echo "############## running the bwa mem alignment of the two pairs"

echo "bwa mem -aM -R"
echo "@RG\tID:$readgroup\tSM:$sample\tPL:$platformunit\tLB:$library\tPU:$platformunit"
echo "/scratch0/""$user"/"$referencefasta"
echo "$query1 $query2"

bwa mem -aM -R "@RG\tID:$identifier\tSM:$sample\tPL:$platformunit\tLB:$library\tPU:$platformunit" /scratch0/"$user"/"$referencefasta" -t 3 "$query1" "$query2" | 
samblaster -M -d "$bamfile".disc.sam -s "$bamfile".split.sam | samtools view -bS - -o "$bamfile"

date

ls -lh

########################################
#     using sambamba on 4 cores        # 
########################################

echo "Running sambamba sort $bamfile"

mkdir temp

sambamba sort -m 4G -t 4  "$bamfile"  --tmpdir=temp

date 

ls -lh

########################################
#          stats with samtools         #
########################################

samtools idxstats "${bamfile:0:7}"*sorted.bam  > "${bamfile:0:7}".stats

##################################
# copy to workplace folder       #
##################################

# create "job_done marker for pipeline

touch "$workplace"/bwa_complete

mv "${bamfile:0:7}"* "$workplace"
date

###################################
# removing the job folder         #
###################################
echo "####MESS moving to /scratch0/$user"
date
cd /scratch0/"$user" || exit
echo "####MESS removing any  file"
rm -r "$JOB_ID"
## remove reference files ######### 
rm  human*
echo "####MESS removal done"
date
echo "####END job finished"
